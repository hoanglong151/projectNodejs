require('dotenv').config()
const md5 = require('md5');
const cloudinary = require('cloudinary').v2;
const modelAccount = require('../models/authentication.model');
const modelBake = require('../models/product.model');

cloudinary.config({
  cloud_name: process.env.CLOUDINARY_CLOUDNAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET,
  secure: true
});

const login = (req, res) => {
  res.render('admin/authentication/login')
}

const register = (req, res) => {
  res.render('admin/authentication/register');
}

const logout = (req, res) => {
  res.clearCookie('userID').redirect('/');
}

const home = (req, res) => {
  modelBake.find({})
  .then((bakes) => {
    res.render('admin/products/index', {
      name: localStorage.getItem('name'),
      bakes
    });
  })
  .catch(err => console.error(err))
}

const editProduct = (req, res) => {
  modelBake.findOne({ _id: req.params.id }, (err, result) => {
    if (err) handleError(err);
    res.render('admin/products/edit', {
      result
    })
  })
}

const editProductPut = (req, res) => {
  cloudinary.uploader.upload(req.file.path, { tags: 'basic_sample' }, async function (err, image) {
    if (err) { console.warn(err); }
    console.log("* public_id for the uploaded image is generated by Cloudinary's service.");
    return {
      image
    };
  }).then(data => req.body.imagelink = data.url)
    .then(newBake => modelBake.updateOne({ _id: req.params.id },
      {
        image: newBake, 
        name: req.body.name,
        description: req.body.des,
        price: req.body.price,
        quantity: req.body.quantity,
      }).then(res.redirect('/admin/home'))
        .catch(err => console.warn(err))
    )
    .catch(err => console.warn(err));
}

const createProduct = (req, res) => {
  res.render('admin/products/create')
}

const createProductPost = (req, res) => {
  cloudinary.uploader.upload(req.file.path, { tags: 'basic_sample' }, async function (err, image) {
    if (err) { console.warn(err); }
    console.log("* public_id for the uploaded image is generated by Cloudinary's service.");
    return {
      image
    };
  }).then(data => req.body.imagelink = data.url)
    .then(newBake => modelBake.create(
      {
        image: newBake, 
        name: req.body.name,
        description: req.body.des,
        price: req.body.price,
        quantity: req.body.quantity,
      }).then(res.redirect('/admin/home'))
        .catch(err => console.warn(err))
    )
    .catch(err => console.warn(err));
}

const registerPost = (req, res) => {
  const accountRegister = ({
    name: req.body.name,
    password: md5(req.body.password),
    confirmPassword: md5(req.body.confirmPassword),
  })

  if (accountRegister.password === accountRegister.confirmPassword) {
    Account.create(accountRegister, (err, result) => {
      if (err) return handleError(err);
      res.render('admin/authentication/login')
      return;
    })
  } else {
    res.render('admin/authentication/register');
    return;
  }
}

const loginPost = (req, res) => {
  modelAccount.findOne({ name: req.body.name }, (err, account) => {
    if (err) return handleError(err);
    if (account === null || account.password !== md5(req.body.password)) {
      res.render('admin/authentication/login');
      return;
    } else {
      localStorage.setItem('name', account.name);
      res.cookie('userID', account._id).redirect('/admin/home');
      return;
    }
  })
}

const detailProduct = (req, res) => {
  modelBake.findOne({ _id: req.params.id }, (err, result) => {
    if (err) return handleError(err);
    res.render('admin/products/detail', {
      result
    })
  })
}

const deleteProduct = (req, res) => {
  modelBake.deleteOne({ _id: req.params.id }, (err, result) => {
    if (err) return handleError(err);
    res.redirect('back');
  })
}

module.exports = {
  login,
  register,
  home,
  createProduct,
  registerPost,
  loginPost,
  createProductPost,
  logout,
  editProduct,
  editProductPut,
  detailProduct,
  deleteProduct,
}